const u={defaultMerge:Symbol("deepmerge-ts: default merge"),skip:Symbol("deepmerge-ts: skip")};function y(e,t){return t}function F(e,t){return e.filter((e=>void 0!==e))}var i;function d(e){return"object"!=typeof e||null===e?0:Array.isArray(e)?2:S(e)?1:e instanceof Set?3:e instanceof Map?4:5}function O(e){const t=new Set;for(const r of e)for(const e of[...Object.keys(r),...Object.getOwnPropertySymbols(r)])t.add(e);return t}function R(e,t){return"object"==typeof e&&Object.prototype.propertyIsEnumerable.call(e,t)}function l(e){return{*[Symbol.iterator](){for(const t of e)for(const e of t)yield e}}}u.defaultMerge,function(e){e[e.NOT=0]="NOT",e[e.RECORD=1]="RECORD",e[e.ARRAY=2]="ARRAY",e[e.SET=3]="SET",e[e.MAP=4]="MAP",e[e.OTHER=5]="OTHER"}(i||(i={}));const m=new Set(["[object Object]","[object Module]"]);function S(e){if(!m.has(Object.prototype.toString.call(e)))return!1;const{constructor:t}=e;if(void 0===t)return!0;const r=t.prototype;return!(null===r||"object"!=typeof r||!m.has(Object.prototype.toString.call(r))||!r.hasOwnProperty("isPrototypeOf"))}function h(e,t,r){const n={};for(const o of O(e)){const c=[];for(const t of e)R(t,o)&&c.push(t[o]);if(0===c.length)continue;const s=t.metaDataUpdater(r,{key:o,parents:e}),i=p(c,t,s);i!==u.skip&&("__proto__"===o?Object.defineProperty(n,o,{value:i,configurable:!0,enumerable:!0,writable:!0}):n[o]=i)}return n}function A(e){return e.flat()}function b(e){return new Set(l(e))}function D(e){return new Map(l(e))}function w(e){return e.at(-1)}const c={mergeRecords:h,mergeArrays:A,mergeSets:b,mergeMaps:D,mergeOthers:w};function U(e,t){const r=I(e,n);function n(...e){return p(e,r,t)}return n}function I(e,t){return{defaultMergeFunctions:c,mergeFunctions:{...c,...Object.fromEntries(Object.entries(e).filter((([e,t])=>Object.hasOwn(c,e))).map((([e,t])=>!1===t?[e,c.mergeOthers]:[e,t])))},metaDataUpdater:e.metaDataUpdater??y,deepmerge:t,useImplicitDefaultMerging:e.enableImplicitDefaultMerging??!1,filterValues:!1===e.filterValues?void 0:e.filterValues??F,actions:u}}function p(e,t,r){const n=t.filterValues?.(e,r)??e;if(0===n.length)return;if(1===n.length)return g(n,t,r);const o=d(n[0]);if(0!==o&&5!==o)for(let e=1;e<n.length;e++)if(d(n[e])!==o)return g(n,t,r);switch(o){case 1:return E(n,t,r);case 2:return V(n,t,r);case 3:return k(n,t,r);case 4:return P(n,t,r);default:return g(n,t,r)}}function E(e,t,r){const n=t.mergeFunctions.mergeRecords(e,t,r);return n===u.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeRecords!==t.defaultMergeFunctions.mergeRecords?t.defaultMergeFunctions.mergeRecords(e,t,r):n}function V(e,t,r){const n=t.mergeFunctions.mergeArrays(e,t,r);return n===u.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeArrays!==t.defaultMergeFunctions.mergeArrays?t.defaultMergeFunctions.mergeArrays(e):n}function k(e,t,r){const n=t.mergeFunctions.mergeSets(e,t,r);return n===u.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeSets!==t.defaultMergeFunctions.mergeSets?t.defaultMergeFunctions.mergeSets(e):n}function P(e,t,r){const n=t.mergeFunctions.mergeMaps(e,t,r);return n===u.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeMaps!==t.defaultMergeFunctions.mergeMaps?t.defaultMergeFunctions.mergeMaps(e):n}function g(e,t,r){const n=t.mergeFunctions.mergeOthers(e,t,r);return n===u.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeOthers!==t.defaultMergeFunctions.mergeOthers?t.defaultMergeFunctions.mergeOthers(e):n}export{U as deepmergeCustom,O as getKeys,d as getObjectType,R as objectHasProperty};