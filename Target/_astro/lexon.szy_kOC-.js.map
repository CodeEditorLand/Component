{"version":3,"file":"lexon.szy_kOC-.js","sources":["../../../../node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.50.0(c321d0fbecb50ab8a5365fa1965476b0ae63fc87)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // comment\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      // special identifier cases\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"mappings":"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","x_google_ignoreList":[0]}