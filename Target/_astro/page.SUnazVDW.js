function throttles(e){e=e||1;var t=[],r=0;function n(){r<e&&t.length>0&&(t.shift()(),r++)}return[function(e){t.push(e)>1||n()},function(){r--,n()}]}function shim(e,t){const r=t?.timeout??50,n=Date.now();return setTimeout((function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,r-(Date.now()-n))}})}),1)}const requestIdleCallback=window.requestIdleCallback||shim;var requestIdleCallback_default=requestIdleCallback;const events=["mouseenter","touchstart","focus"],preloaded=new Set,loadedStyles=new Set;function shouldPreload({href:e}){try{const t=new URL(e);return window.location.origin===t.origin&&window.location.pathname!==t.pathname&&!preloaded.has(e)}catch{}return!1}let parser,observer;function observe(e){preloaded.add(e.href),observer.observe(e),events.map((t=>e.addEventListener(t,onLinkEvent,{passive:!0,once:!0})))}function unobserve(e){observer.unobserve(e),events.map((t=>e.removeEventListener(t,onLinkEvent)))}function onLinkEvent({target:e}){e instanceof HTMLAnchorElement&&preloadHref(e)}async function preloadHref(e){unobserve(e);const{href:t}=e;try{const e=await fetch(t).then((e=>e.text()));parser||=new DOMParser;const r=parser.parseFromString(e,"text/html"),n=Array.from(r.querySelectorAll('link[rel="stylesheet"]'));await Promise.all(n.filter((e=>!loadedStyles.has(e.href))).map((e=>(loadedStyles.add(e.href),fetch(e.href)))))}catch{}}function prefetch({selector:e='a[href][rel~="prefetch"]',throttle:t=1,intentSelector:r='a[href][rel~="prefetch-intent"]'}){if(!navigator.onLine)return Promise.reject(new Error("Cannot prefetch, no network connection"));if("connection"in navigator){const e=navigator.connection;if(e.saveData)return Promise.reject(new Error("Cannot prefetch, Save-Data is enabled"));if(/(2|3)g/.test(e.effectiveType))return Promise.reject(new Error("Cannot prefetch, network conditions are poor"))}const[n,o]=throttles(t);observer=observer||new IntersectionObserver((e=>{e.forEach((e=>{if(e.isIntersecting&&e.target instanceof HTMLAnchorElement){const t=e.target.getAttribute("rel")||"";let a=!1;a=Array.isArray(r)?r.some((e=>t.includes(e))):t.includes(r),a||n((()=>preloadHref(e.target).finally(o)))}}))})),requestIdleCallback_default((()=>{[...document.querySelectorAll(e)].filter(shouldPreload).forEach(observe);const t=Array.isArray(r)?r.join(","):r;[...document.querySelectorAll(t)].filter(shouldPreload).forEach((e=>{events.map((t=>e.addEventListener(t,onLinkEvent,{passive:!0,once:!0})))}))}))}prefetch({});