const actions={defaultMerge:Symbol("deepmerge-ts: default merge"),skip:Symbol("deepmerge-ts: skip")};function defaultMetaDataUpdater(e,t){return t}function defaultFilterValues(e,t){return e.filter((e=>void 0!==e))}var ObjectType;function getObjectType(e){return"object"!=typeof e||null===e?0:Array.isArray(e)?2:isRecord(e)?1:e instanceof Set?3:e instanceof Map?4:5}function getKeys(e){const t=new Set;for(const r of e)for(const e of[...Object.keys(r),...Object.getOwnPropertySymbols(r)])t.add(e);return t}function objectHasProperty(e,t){return"object"==typeof e&&Object.prototype.propertyIsEnumerable.call(e,t)}function getIterableOfIterables(e){return{*[Symbol.iterator](){for(const t of e)for(const e of t)yield e}}}actions.defaultMerge,function(e){e[e.NOT=0]="NOT",e[e.RECORD=1]="RECORD",e[e.ARRAY=2]="ARRAY",e[e.SET=3]="SET",e[e.MAP=4]="MAP",e[e.OTHER=5]="OTHER"}(ObjectType||(ObjectType={}));const validRecordToStringValues=new Set(["[object Object]","[object Module]"]);function isRecord(e){if(!validRecordToStringValues.has(Object.prototype.toString.call(e)))return!1;const{constructor:t}=e;if(void 0===t)return!0;const r=t.prototype;return!(null===r||"object"!=typeof r||!validRecordToStringValues.has(Object.prototype.toString.call(r)))&&!!r.hasOwnProperty("isPrototypeOf")}function mergeRecords$1(e,t,r){const n={};for(const o of getKeys(e)){const s=[];for(const t of e)objectHasProperty(t,o)&&s.push(t[o]);if(0===s.length)continue;const c=t.metaDataUpdater(r,{key:o,parents:e}),u=mergeUnknowns(s,t,c);u!==actions.skip&&("__proto__"===o?Object.defineProperty(n,o,{value:u,configurable:!0,enumerable:!0,writable:!0}):n[o]=u)}return n}function mergeArrays$1(e){return e.flat()}function mergeSets$1(e){return new Set(getIterableOfIterables(e))}function mergeMaps$1(e){return new Map(getIterableOfIterables(e))}function mergeOthers$1(e){return e.at(-1)}const mergeFunctions={mergeRecords:mergeRecords$1,mergeArrays:mergeArrays$1,mergeSets:mergeSets$1,mergeMaps:mergeMaps$1,mergeOthers:mergeOthers$1};function deepmergeCustom(e,t){const r=getUtils(e,n);function n(...e){return mergeUnknowns(e,r,t)}return n}function getUtils(e,t){return{defaultMergeFunctions:mergeFunctions,mergeFunctions:{...mergeFunctions,...Object.fromEntries(Object.entries(e).filter((([e,t])=>Object.hasOwn(mergeFunctions,e))).map((([e,t])=>!1===t?[e,mergeFunctions.mergeOthers]:[e,t])))},metaDataUpdater:e.metaDataUpdater??defaultMetaDataUpdater,deepmerge:t,useImplicitDefaultMerging:e.enableImplicitDefaultMerging??!1,filterValues:!1===e.filterValues?void 0:e.filterValues??defaultFilterValues,actions:actions}}function mergeUnknowns(e,t,r){const n=t.filterValues?.(e,r)??e;if(0===n.length)return;if(1===n.length)return mergeOthers(n,t,r);const o=getObjectType(n[0]);if(0!==o&&5!==o)for(let e=1;e<n.length;e++)if(getObjectType(n[e])!==o)return mergeOthers(n,t,r);switch(o){case 1:return mergeRecords(n,t,r);case 2:return mergeArrays(n,t,r);case 3:return mergeSets(n,t,r);case 4:return mergeMaps(n,t,r);default:return mergeOthers(n,t,r)}}function mergeRecords(e,t,r){const n=t.mergeFunctions.mergeRecords(e,t,r);return n===actions.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeRecords!==t.defaultMergeFunctions.mergeRecords?t.defaultMergeFunctions.mergeRecords(e,t,r):n}function mergeArrays(e,t,r){const n=t.mergeFunctions.mergeArrays(e,t,r);return n===actions.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeArrays!==t.defaultMergeFunctions.mergeArrays?t.defaultMergeFunctions.mergeArrays(e):n}function mergeSets(e,t,r){const n=t.mergeFunctions.mergeSets(e,t,r);return n===actions.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeSets!==t.defaultMergeFunctions.mergeSets?t.defaultMergeFunctions.mergeSets(e):n}function mergeMaps(e,t,r){const n=t.mergeFunctions.mergeMaps(e,t,r);return n===actions.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeMaps!==t.defaultMergeFunctions.mergeMaps?t.defaultMergeFunctions.mergeMaps(e):n}function mergeOthers(e,t,r){const n=t.mergeFunctions.mergeOthers(e,t,r);return n===actions.defaultMerge||t.useImplicitDefaultMerging&&void 0===n&&t.mergeFunctions.mergeOthers!==t.defaultMergeFunctions.mergeOthers?t.defaultMergeFunctions.mergeOthers(e):n}export{deepmergeCustom,getKeys,getObjectType,objectHasProperty};